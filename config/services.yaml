# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
  .container.dumper.inline_factories: true
  app.files_dir: '%kernel.project_dir%/files'

services:
  # default configuration for services in *this* file
  _defaults:
    autowire: true      # Automatically injects dependencies in your services.
    autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

  # makes classes in src/ available to be used as services
  # this creates a service per class whose id is the fully-qualified class name
  App\:
    resource: '../src/'

  # add more service definitions when explicit configuration is needed
  # please note that last definitions always *replace* previous ones

  # --- start monolog/monolog
  monolog.custom_handlers.telegram.error:
    class: App\Infrastructure\Service\Logger\Handler\TelegramBotHandler
    arguments:
      $apiKey: "%env(string:TELEGRAM_CONFIG_ERROR_BOT_KEY)%"
      $channel: "%env(string:TELEGRAM_CONFIG_ERROR_CHAT_ID)%"
      $disableWebPagePreview: true
      $parseMode: MarkdownV2
      $topic: "%env(TELEGRAM_CONFIG_ERROR_TOPIC)%"
      $level: error
    calls:
      - setFormatter: ['@monolog.custom_formatter.telegram']

  monolog.custom_formatter.telegram:
    class: App\Infrastructure\Service\Logger\TelegramFormatter
    arguments:
      $includeStacktraces: true
      $ignoreEmptyContextAndExtra: true

  Monolog\Processor\PsrLogMessageProcessor:
    tags:
      - {name: monolog.processor, channel: 'app'}
  # --- end monolog/monolog

  # --- start listeners
  listeners.api.error:
    class: App\Presentation\Api\Listener\ErrorResponseListener
    arguments:
      $debug: '%kernel.debug%'
      $logger: '@logger'
      $pathPattern: '^/api([\/\?].*)?$'
    tags:
      - {name: kernel.event_listener, event: kernel.exception, priority: 10}
  listeners.api.validation:
    class: App\Presentation\Api\Listener\ValidationResponseListener
    arguments:
      $pathPattern: '^/api([\/\?].*)?$'
    tags:
      - {name: kernel.event_listener, event: kernel.exception, priority: 100}
  # --- end listeners

  # --- start encryptors
  App\Domain\Service\Security\EncryptorInterface $messageTextEncryptor:
    class: App\Infrastructure\Service\Security\OpenSSLEncryptor
    arguments:
      $cipherMethod: '%env(MESSAGE_TEXT_ENCRYPTOR_CIPHER_METHOD)%'
      $passphrase: '%env(MESSAGE_TEXT_ENCRYPTOR_PASSPHRASE)%'
      $iv: '%env(MESSAGE_TEXT_ENCRYPTOR_IV)%'
  App\Domain\Service\Security\EncryptorInterface $messageIdEncryptor:
    class: App\Infrastructure\Service\Security\SodiumCryptoAeadXChaCha20Poly1305Encryptor
    arguments:
      $nonce: '%env(MESSAGE_ID_ENCRYPTOR_NONCE)%'
      $key: '%env(MESSAGE_ID_ENCRYPTOR_KEY)%'

  App\Domain\Service\Jwt\JwtServiceInterface:
    class: App\Infrastructure\Service\Jwt\JwtService
    arguments:
      $key: '%env(APP_SECRET)%'
  # --- end encryptors

  # --- start services
  App\Domain\Service\Message\MessageService:
    arguments:
      $messageLifetime: '%env(MESSAGE_LIFETIME)%'
  App\Domain\Service\File\FilesService:
    arguments:
      $filesDir: '%app.files_dir%'
  # --- end services
